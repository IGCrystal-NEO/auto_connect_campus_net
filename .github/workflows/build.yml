name: Build and Release EXE (manual, auto-tag, venv + install requirements)

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g. 1.2.3 or v1.2.3)'
        required: true
        default: '1.0.0'

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      - name: Checkout repository (fetch tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Create venv and install dependencies (PyInstaller + requirements)
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          python -m venv .venv
          # 使用 venv 的 pip 安装依赖和 pyinstaller
          .\.venv\Scripts\pip.exe install --upgrade pip
          .\.venv\Scripts\pip.exe install pyinstaller
          if (Test-Path 'requirements.txt') {
            .\.venv\Scripts\pip.exe install -r requirements.txt
          } else {
            Write-Host 'No requirements.txt found, skipping.'
          }
          # 把 venv 的可执行路径导出为 env 供后续步骤使用
          echo "VENV_PY=.venv\\Scripts\\python.exe" >> $env:GITHUB_ENV
          echo "VENV_PYINSTALLER=.venv\\Scripts\\pyinstaller.exe" >> $env:GITHUB_ENV

      - name: Build with PyInstaller (uses build.spec at repo root)
        shell: pwsh
        run: |
          if (-not (Test-Path $env:VENV_PYINSTALLER)) {
            Write-Error "pyinstaller not found in venv: $env:VENV_PYINSTALLER"
            exit 1
          }
          & $env:VENV_PYINSTALLER --clean --noconfirm build.spec

      - name: Find built .exe
        id: find_exe
        shell: pwsh
        run: |
          $exe = Get-ChildItem -Path dist -Recurse -Filter *.exe -File | Select-Object -First 1
          if (-not $exe) {
            Write-Error "No .exe found in dist directory. Build may have failed."
            exit 1
          }
          echo "exe_path=$($exe.FullName)" >> $env:GITHUB_OUTPUT
          echo "exe_name=$($exe.Name)" >> $env:GITHUB_OUTPUT
          Write-Host "Found exe: $($exe.FullName)"

      - name: Compose tag name (prepend v if needed)
        id: compose_tag
        shell: pwsh
        run: |
          $input = "${{ github.event.inputs.version }}"
          if ($input.StartsWith('v')) {
            $tag = $input
          } else {
            $tag = "v$input"
          }
          echo "TAG=$tag" >> $env:GITHUB_ENV
          Write-Host "Computed TAG: $tag"

      - name: Ensure tag does not already exist && create & push tag
        shell: pwsh
        env:
          TAG: ${{ env.TAG }}
        run: |
          Write-Host "Checking if tag $env:TAG exists on remote..."
          $exists = git ls-remote --tags origin $env:TAG
          if ($exists) {
            Write-Error "Tag $env:TAG already exists on remote. Aborting to avoid overwrite."
            exit 1
          }
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a $env:TAG -m "Release $env:TAG"
          git push origin $env:TAG
          Write-Host "Tag $env:TAG created and pushed."

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.TAG }}
          release_name: ${{ env.TAG }}
          body: "Release ${{ env.TAG }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload EXE as release asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_exe.outputs.exe_path }}
          asset_name: ${{ steps.find_exe.outputs.exe_name }}
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
