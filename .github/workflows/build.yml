name: Build and Release EXE (single .exe)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies (PyInstaller + optional requirements)
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          if (Test-Path 'requirements.txt') {
            pip install -r requirements.txt
          } else {
            Write-Host 'No requirements.txt found, skipping.'
          }

      - name: Build with PyInstaller (uses build.spec at repo root)
        shell: pwsh
        run: |
          pyinstaller --clean --noconfirm build.spec

      - name: Find built .exe
        id: find_exe
        shell: pwsh
        run: |
          $exe = Get-ChildItem -Path dist -Recurse -Filter *.exe -File | Select-Object -First 1
          if (-not $exe) {
            Write-Error "No .exe found in dist directory. Build may have failed."
            exit 1
          }
          # 导出为 step outputs
          echo "exe_path=$($exe.FullName)" >> $env:GITHUB_OUTPUT
          echo "exe_name=$($exe.Name)" >> $env:GITHUB_OUTPUT
          Write-Host "Found exe: $($exe.FullName)"

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          body: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload EXE as release asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_exe.outputs.exe_path }}
          asset_name: ${{ steps.find_exe.outputs.exe_name }}
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
